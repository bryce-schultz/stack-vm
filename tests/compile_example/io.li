void print(string message) {
    asm("push 1") # set fd to 1 for stdout
    for (c : message)
    {
        asm("push " + (int)c)
    }
    asm("push " + message.length)
}

class AutoIncrement<instance> {
    AutoIncrement(int startValue)[instance] {
        int instance.count = startValue;
        instance.count++
    }

    int get()[instance] {
        return instance.count
    }
}

class BaseApp {
    property AutoIncrement<@> id
}

class App from BaseApp {
    property Player[] players

    void addPlayer(Player player)[@] {
        players.add(player)
    }
}

class Entity {
    property int health

    void battle(Entity other)[Battle] {
        isAlive = (Entity e) { return e.health > 0 }

        while (true) {
            attack(other)
            if (!isAlive(other)) {
                kill(other)
                break
            } else {
                other.attack(this)
                if (!isAlive(this)) {
                    other.kill(this)
                    break
                }
            }
        }
    }

    hook onKill(Entity other)[Battle] {
        participants.remove(other)
    }

    void attack(Entity other)[@]
}

class Battle {
    Entity[] participants

    Battle() {
    }

    void addParticipant(Entity participant) {
        participants.add(participant)
    }

    void start() {
        mutations(participants, 2, (one, two) {
            one.battle(two)
        })
    }
}

class Player from Entity {
    property string name
    int damage
    int level

    Player(name) {
        damage = 10
        level = 0
    }

    void increaseDamage(int amount)[@] {
        damage += amount
    }

    void attack(Entity other)[@] {
        float mult = 1 + level / 10 # lvl 1 = 1 + 1 / 10 = 1.10 x
        entity.health -= damage * mult
    }

    # level up every 10 enemy kills
    hook onKill(Enemy other)[Battle] {
        static int levelPart = 0

        levelPart++

        if (levelPart >= 10)
        {
            level++
            levelPart = 0
        }
    }

    void print()[@] {
        .print("My name is {name} and I am {age} years old")
    }
}

class Ememy from Entity {
    property int attackDamage

    void attack(Entity other)[@] {
        other.health -= attackDamage
    }
}

class Slime as Enemy {

}